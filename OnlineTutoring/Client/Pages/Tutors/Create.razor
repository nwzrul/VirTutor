
@page "/tutors/register/"
@inject HttpClient _client
@inject NavigationManager _navManager

<style>
    /* Add the suggested CSS styles here */
    body {
        background-color: #f0e8f9; /* Light purple background */
        color: #000000; /* Dark text color */
        font-family: 'Arial', sans-serif; /* Use a suitable font */
    }

    h3 {
        color: #6b5296; /* Purple heading color */
    }

    .btn {
        background-color: #8752ad; /* Purple button color */
        color: #ffffff; /* White text for buttons */
    }

    img {
        border-radius: 8px; /* Rounded corners for images */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 12px;
        border: 1px solid #ddd;
    }

    th {
        background-color: #8752ad; /* Purple header background */
        color: #000000;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9; /* Zebra striping */
    }

    a {
        color: #8752ad; /* Purple link color */
    }

        a:hover {
            text-decoration: underline; /* Underline on hover */
        }

    td a {
        color: #1e7fd0; /* Blue color for qualification links */
    }
</style>

<h3 class="card-title"> Register as Tutor</h3>

@* <FormComponent ButtonText="Register Tutor" tutor="tutor" OnValidSubmit="@RegisterTutor" /> *@

<EditForm Model="@tutor" OnValidSubmit="RegisterTutor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Tutor's Image':</label>
        <div>
            <img src="@tutor.TutorImg" style="width: 250px; height: 250px;"> <br /> <br />
            <InputFile OnChange="@OnInputFileChanged"></InputFile>
        </div>
    </div>
    <div class="form-group">
        <label>Tutor Name:</label>
        <div>
            <InputText @bind-Value="@tutor.TutorName" class="form-control" />
            <ValidationMessage For="@(() => tutor.TutorName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Tutor Age: </label>
        <div>
            <InputNumber @bind-Value="tutor.TutorAge" class="form-control" />
            <ValidationMessage For="@(()=> tutor.TutorAge)" />
        </div>
    </div>
    <div class="form-group">
        <label>Tutor Gender:</label>
        <div>
            <InputSelect @bind-Value="@tutor.TutorGender" class="form-control">
                <option value="">-- Select Gender --</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="An Individual">Individual</option>
            </InputSelect>
            <ValidationMessage For="@(() => tutor.TutorGender)" />
        </div>
    </div>
    <div class="form-group">
        <label>Qualifications: </label>
        <div>
            <InputText @bind-Value="tutor.Qualification" class="form-control" />
            <ValidationMessage For="@(()=> tutor.Qualification)" />
        </div>
    </div>
    <div class="form-group">
        <label>Diploma Name: </label>
        <div>
            <InputSelect @bind-Value="tutor.DiplomaID" class="form-control">
                <option value="">-- Select Diploma --</option>
                @if (Diplomas != null)
                {
                    foreach (var diploma in Diplomas)
                    {
                        <option value="@diploma.Id">@diploma.DiplomaName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> tutor.DiplomaID)" />
        </div>
    </div>
    <div class="form-group">
        <label>Degree Name: </label>
        <div>
            <InputSelect @bind-Value="tutor.DegreeID" class="form-control">
                <option value="">-- Select Degree --</option>
                @if (Degrees != null)
                {
                    foreach (var degree in Degrees)
                    {
                        <option value="@degree.Id">@degree.DegreeName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> tutor.DegreeID)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Register Tutor
    </button>

</EditForm>


@code {

    Tutor tutor = new Tutor();

    private IList<Gender>? Genders;
    private IList<Tutor>? Tutors;
    private IList<Degree>? Degrees;
    private IList<Diploma>? Diplomas;



    protected async override Task OnInitializedAsync()
    {
        Tutors = await _client.GetFromJsonAsync<List<Tutor>>($"{Endpoints.TutorsEndpoint}");
        Degrees = await _client.GetFromJsonAsync<List<Degree>>($"{Endpoints.DegreesEndpoint}");
        Diplomas = await _client.GetFromJsonAsync<List<Diploma>>($"{Endpoints.DiplomasEndpoint}");
        
    }

    private async Task RegisterTutor()
    {
        await _client.PostAsJsonAsync(Endpoints.TutorsEndpoint, tutor);
        _navManager.NavigateTo("/tutors/");
    }
    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        var file = inputFileChangeEvent.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        tutor.TutorImg = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }
}
